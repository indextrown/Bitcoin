from dotenv import load_dotenv
import os
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.image import MIMEImage
GMAIL_ADDRESS = "indextrown@gmail.com"
TO_EMAIL = "indextrown@gmail.com"

import pyupbit  # ÏóÖÎπÑÌä∏ ÎùºÏù¥Î∏åÎü¨Î¶¨
import matplotlib.pyplot as plt
import matplotlib.dates as mdates

load_dotenv()
GMAIL_APP_PASSWORD = os.getenv("GMAIL_APP_PASSWORD").replace(" ", "")

def get_bitcoin_chart():
    # Ïò§Îäò ÎπÑÌä∏ÏΩîÏù∏ 15Î∂ÑÎ¥â Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞
    df = pyupbit.get_ohlcv("KRW-BTC", interval="minute15", count=50)  # ÏµúÍ∑º 50Í∞ú Ï∫îÎì§
    
    # Ï∞®Ìä∏ Í∑∏Î¶¨Í∏∞
    plt.figure(figsize=(10,5))
    plt.plot(df.index, df["close"], label="BTC/KRW (15m)")
    plt.title("Ïò§Îäò ÎπÑÌä∏ÏΩîÏù∏ 15Î∂ÑÎ¥â")
    plt.xlabel("ÏãúÍ∞Ñ")
    plt.ylabel("Í∞ÄÍ≤© (KRW)")
    plt.legend()
    plt.grid(True)
    
    # PNG Ï†ÄÏû•
    chart_path = "btc_chart.png"
    plt.savefig(chart_path)
    plt.close()
    return chart_path

def send_gmail(subject, body, image_path=None):
    try:
        msg = MIMEMultipart()
        msg['From'] = GMAIL_ADDRESS
        msg['To'] = TO_EMAIL
        msg['Subject'] = subject

        # ÌÖçÏä§Ìä∏ Î≥∏Î¨∏ Ï∂îÍ∞Ä
        msg.attach(MIMEText(body, 'plain'))

        # Ïù¥ÎØ∏ÏßÄ Ï≤®Î∂Ä (ÏòµÏÖò)
        if image_path and os.path.exists(image_path):
            with open(image_path, 'rb') as f:
                img_data = f.read()
                image = MIMEImage(img_data, name=os.path.basename(image_path))
                msg.attach(image)

        # Gmail ÏÑúÎ≤Ñ Ï†ëÏÜç
        server = smtplib.SMTP_SSL('smtp.gmail.com', 465)
        server.login(GMAIL_ADDRESS, GMAIL_APP_PASSWORD)
        server.send_message(msg)
        server.quit()

        print("‚úÖ Î©îÏùº Ï†ÑÏÜ° ÏôÑÎ£å")

    except Exception as e:
        print("‚ùå Î©îÏùº Ï†ÑÏÜ° Ïã§Ìå®:", e)


# send_gmail("Ï†úÎ™©", "ÌÖåÏä§Ìä∏")
# send_gmail("Ï†úÎ™©", "Î≥∏Î¨∏ ÎÇ¥Ïö©", "cat.png")  # sample.png Ïù¥ÎØ∏ÏßÄ Ï≤®Î∂Ä

# Ïã§Ìñâ ÏòàÏãú
# chart = get_bitcoin_chart()
# send_gmail("Ïò§ÎäòÏùò ÎπÑÌä∏ÏΩîÏù∏ Ï∞®Ìä∏", "ÎπÑÌä∏ÏΩîÏù∏ 15Î∂ÑÎ¥â Ï∞®Ìä∏ÏûÖÎãàÎã§.", chart)



#################################################################################
def calculate_rsi(series, period=14):
    """RSI Í≥ÑÏÇ∞ Ìï®Ïàò"""
    delta = series.diff()
    gain = delta.clip(lower=0)
    loss = -delta.clip(upper=0)

    avg_gain = gain.rolling(period).mean()
    avg_loss = loss.rolling(period).mean()

    rs = avg_gain / avg_loss
    rsi = 100 - (100 / (1 + rs))
    return rsi


def get_coin_chart(
    ticker="KRW-BTC",
    interval="minute15",
    count=100,
    ma1=5,
    ma2=20,
    rsi_interval="minute60",     # ‚úÖ RSIÎäî Î≥ÑÎèÑ intervalÎ°ú Í≥ÑÏÇ∞ Í∞ÄÎä•
    rsi_label_interval=1         # ‚úÖ RSI Ï∞®Ìä∏ xÏ∂ï ÎùºÎ≤® ÌëúÏãú Í∞ÑÍ≤©(ÏãúÍ∞Ñ Îã®ÏúÑ)
):
    """
    ÏΩîÏù∏ Ï∞®Ìä∏Î•º Í∑∏Î†§ PNGÎ°ú Ï†ÄÏû•ÌïòÍ≥† Í≤ΩÎ°úÎ•º Î∞òÌôòÌï©ÎãàÎã§.
    - Í∞ÄÍ≤© Ï∞®Ìä∏: interval Í∏∞Ï§Ä
    - MA1, MA2 ÌëúÏãú
    - RSI(14): rsi_interval Í∏∞Ï§Ä
    """

    # Î©îÏù∏ Ï∞®Ìä∏ Îç∞Ïù¥ÌÑ∞
    df = pyupbit.get_ohlcv(ticker, interval=interval, count=count)
    if df is None or df.empty:
        raise ValueError(f"Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò§ÏßÄ Î™ªÌñàÏäµÎãàÎã§: {ticker}, {interval}")

    # Ïù¥ÎèôÌèâÍ∑†ÏÑ† Í≥ÑÏÇ∞
    df[f"MA{ma1}"] = df["close"].rolling(ma1).mean()
    df[f"MA{ma2}"] = df["close"].rolling(ma2).mean()

    # RSI Îç∞Ïù¥ÌÑ∞ (ÏÇ¨Ïö©ÏûêÍ∞Ä ÏßÄÏ†ïÌïú interval)
    df_rsi = pyupbit.get_ohlcv(ticker, interval=rsi_interval, count=count)
    df_rsi["RSI"] = calculate_rsi(df_rsi["close"], period=14)

    # ‚úÖ Subplot Íµ¨ÏÑ± (Í∞ÄÍ≤© + RSI)
    fig, (ax1, ax2) = plt.subplots(
        2, 1, figsize=(12,8), sharex=False,
        gridspec_kw={'height_ratios': [3,1]}
    )

    # ‚ë† Í∞ÄÍ≤© Ï∞®Ìä∏
    ax1.plot(df.index, df["close"], label=f"{ticker} ({interval})", color="black")
    ax1.plot(df.index, df[f"MA{ma1}"], linestyle="--", label=f"MA{ma1}", color="blue")
    ax1.plot(df.index, df[f"MA{ma2}"], linestyle="--", label=f"MA{ma2}", color="purple")
    ax1.set_title(f"{ticker} {interval} Ï∞®Ìä∏ + RSI({rsi_interval})")
    ax1.set_ylabel("Í∞ÄÍ≤© (KRW)")
    ax1.legend()
    ax1.grid(True)

    # Í∞ÄÍ≤© Ï∞®Ìä∏ xÏ∂ï: 1ÏãúÍ∞Ñ Í∞ÑÍ≤©
    ax1.xaxis.set_major_locator(mdates.HourLocator(interval=1))
    ax1.xaxis.set_major_formatter(mdates.DateFormatter("%H:%M"))
    plt.setp(ax1.xaxis.get_majorticklabels(), rotation=45)

    # ‚ë° RSI Ï∞®Ìä∏
    ax2.plot(df_rsi.index, df_rsi["RSI"], linestyle="--", color="red", label=f"RSI(14, {rsi_interval})")
    ax2.axhline(70, color="gray", linestyle="--", linewidth=0.7)
    ax2.axhline(30, color="gray", linestyle="--", linewidth=0.7)
    ax2.set_ylabel("RSI")
    ax2.set_ylim(0, 100)
    ax2.legend()
    ax2.grid(True)

    # RSI Ï∞®Ìä∏ xÏ∂ï: Í∏∞Î≥∏ 6ÏãúÍ∞Ñ Í∞ÑÍ≤©
    ax2.xaxis.set_major_locator(mdates.HourLocator(interval=rsi_label_interval))
    ax2.xaxis.set_major_formatter(mdates.DateFormatter("%m-%d %H:%M"))
    plt.setp(ax2.xaxis.get_majorticklabels(), rotation=45)

    plt.tight_layout()

    # PNG Ï†ÄÏû•
    chart_path = f"{ticker.replace('-', '_')}_{interval}_with_rsi.png"
    plt.savefig(chart_path, dpi=300, bbox_inches="tight")
    plt.close()

    return chart_path

# ETH 15Î∂ÑÎ¥â + RSI(60Î∂ÑÎ¥â)
# chart = get_coin_chart("KRW-ETH", interval="minute15", rsi_interval="minute60")

# send_gmail("Ïò§ÎäòÏùò ETH Ï∞®Ìä∏", "ETH 15Î∂ÑÎ¥â Ï∞®Ìä∏ÏûÖÎãàÎã§.", chart)


#################################################################################



def get_coin_chart2(
    ticker="KRW-BTC",
    interval="minute15",
    count=100,
    ma1=5,
    ma2=20,
    rsi_interval="minute60",
    rsi_label_interval=1,
    pos_before3=-3,    # MA5 before3 Ï∞çÏùÑ ÏúÑÏπò
    pos_before2=-2,    # MA5 before2 Ï∞çÏùÑ ÏúÑÏπò
    pos_now=-1,        # MA5 now Ï∞çÏùÑ ÏúÑÏπò
    buy_pos=-1,        # Îß§Ïàò Ï≤¥Í≤∞Í∞Ä ÏúÑÏπò
    sell_pos=-1,       # ÏßÄÏ†ïÍ∞Ä Îß§ÎèÑ ÏúÑÏπò
    buy_price=None,    # Îß§Ïàò Ï≤¥Í≤∞Í∞Ä (Ï¥àÎ°ù ‚ñ≤)
    target_sell_price=None  # ÏßÄÏ†ïÍ∞Ä Îß§ÎèÑ Îã®Í∞Ä (ÌååÎûë ‚ñº)
):
    """
    ÏΩîÏù∏ Ï∞®Ìä∏Î•º Í∑∏Î†§ PNGÎ°ú Ï†ÄÏû•ÌïòÍ≥† Í≤ΩÎ°úÎ•º Î∞òÌôòÌï©ÎãàÎã§.
    - MA5: Í∞àÏÉâ2Í∞ú(-3, -2), Ï¥àÎ°ùÏ†ê(-1)
    - Îß§Ïàò Îã®Í∞Ä: Ï¥àÎ°ù ÏÇºÍ∞ÅÌòï ‚ñ≤ (buy_pos ÏúÑÏπò)
    - ÏßÄÏ†ïÍ∞Ä Îß§ÎèÑ Îã®Í∞Ä: ÌååÎûÄ ÏÇºÍ∞ÅÌòï ‚ñº (sell_pos ÏúÑÏπò)
    """

    def calculate_rsi(series, period=14):
        """RSI Í≥ÑÏÇ∞ Ìï®Ïàò"""
        delta = series.diff()
        gain = delta.clip(lower=0)
        loss = -delta.clip(upper=0)

        avg_gain = gain.rolling(period).mean()
        avg_loss = loss.rolling(period).mean()

        rs = avg_gain / avg_loss
        rsi = 100 - (100 / (1 + rs))
        return rsi

    # Î©îÏù∏ Ï∞®Ìä∏ Îç∞Ïù¥ÌÑ∞
    df = pyupbit.get_ohlcv(ticker, interval=interval, count=count)
    if df is None or df.empty:
        raise ValueError(f"Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò§ÏßÄ Î™ªÌñàÏäµÎãàÎã§: {ticker}, {interval}")

    # Ïù¥ÎèôÌèâÍ∑†ÏÑ† Í≥ÑÏÇ∞
    df[f"MA{ma1}"] = df["close"].rolling(ma1, min_periods=1).mean()
    df[f"MA{ma2}"] = df["close"].rolling(ma2, min_periods=1).mean()

    # RSI Îç∞Ïù¥ÌÑ∞
    df_rsi = pyupbit.get_ohlcv(ticker, interval=rsi_interval, count=count)
    df_rsi["RSI"] = calculate_rsi(df_rsi["close"], period=14)

    # ‚úÖ Subplot Íµ¨ÏÑ±
    fig, (ax1, ax2) = plt.subplots(
        2, 1, figsize=(12,8), sharex=False,
        gridspec_kw={'height_ratios': [3,1]}
    )

    # ‚ë† Í∞ÄÍ≤© Ï∞®Ìä∏
    ax1.plot(df.index, df["close"], label=f"{ticker} ({interval})", color="black")
    ax1.plot(df.index, df[f"MA{ma1}"], linestyle="--", label=f"MA{ma1}", color="blue")
    ax1.plot(df.index, df[f"MA{ma2}"], linestyle="--", label=f"MA{ma2}", color="purple")
    ax1.set_title(f"{ticker} {interval} Ï∞®Ìä∏ + RSI({rsi_interval})")
    ax1.set_ylabel("Í∞ÄÍ≤© (KRW)")
    ax1.legend()
    ax1.grid(True)

    ma5_series = df[f"MA{ma1}"].dropna()

    # üìç MA5 Ìè¨Ïù∏Ìä∏
    if len(ma5_series) >= abs(pos_before3):
        ax1.scatter(ma5_series.index[pos_before3], ma5_series.iloc[pos_before3],
                    color="brown", s=60, zorder=5, label="MA5_before3")
    if len(ma5_series) >= abs(pos_before2):
        ax1.scatter(ma5_series.index[pos_before2], ma5_series.iloc[pos_before2],
                    color="brown", s=60, zorder=5, label="MA5_before2")
    if len(ma5_series) >= abs(pos_now):
        ax1.scatter(ma5_series.index[pos_now], ma5_series.iloc[pos_now],
                    color="lime", s=80, zorder=5, label="MA5_now")

    # üìç Îß§Ïàò/ÏßÄÏ†ïÍ∞Ä Îß§ÎèÑ Ìè¨Ïù∏Ìä∏
    if buy_price is not None and len(df) >= abs(buy_pos):
        ax1.scatter(df.index[buy_pos], buy_price,
                    color="lime", s=120, zorder=5, marker="^", label="Îß§Ïàò")
    if target_sell_price is not None and len(df) >= abs(sell_pos):
        ax1.scatter(df.index[sell_pos], target_sell_price,
                    color="blue", s=120, zorder=5, marker="v", label="ÏßÄÏ†ïÍ∞ÄÎß§ÎèÑ")

    # Í∞ÄÍ≤© Ï∞®Ìä∏ xÏ∂ï
    ax1.xaxis.set_major_locator(mdates.HourLocator(interval=1))
    ax1.xaxis.set_major_formatter(mdates.DateFormatter("%H:%M"))
    plt.setp(ax1.xaxis.get_majorticklabels(), rotation=45)

    # ‚ë° RSI Ï∞®Ìä∏
    ax2.plot(df_rsi.index, df_rsi["RSI"], linestyle="--", color="red", label=f"RSI(14, {rsi_interval})")
    ax2.axhline(70, color="gray", linestyle="--", linewidth=0.7)
    ax2.axhline(30, color="gray", linestyle="--", linewidth=0.7)
    ax2.set_ylabel("RSI")
    ax2.set_ylim(0, 100)
    ax2.legend()
    ax2.grid(True)

    ax2.xaxis.set_major_locator(mdates.HourLocator(interval=rsi_label_interval))
    ax2.xaxis.set_major_formatter(mdates.DateFormatter("%m-%d %H:%M"))
    plt.setp(ax2.xaxis.get_majorticklabels(), rotation=45)

    plt.tight_layout()

    # PNG Ï†ÄÏû•
    chart_path = f"{ticker.replace('-', '_')}_{interval}_with_rsi.png"
    plt.savefig(chart_path, dpi=300, bbox_inches="tight")
    plt.close()

    return chart_path



chart = get_coin_chart2(
    "KRW-ETH",
    interval="minute15",
    rsi_interval="minute60",
    pos_before3=-7,
    pos_before2=-6,
    pos_now=-5,
    buy_pos=-5,
    sell_pos=-5,
    buy_price=6081200,        # Ïã§Ï†ú Îß§Ïàò Ï≤¥Í≤∞Í∞Ä
    target_sell_price=6142000 # ÏßÄÏ†ïÍ∞Ä Îß§ÎèÑ Í∞ÄÍ≤©
)


send_gmail("Ïò§ÎäòÏùò ETH Ï∞®Ìä∏", "ETH 15Î∂ÑÎ¥â Ï∞®Ìä∏ÏûÖÎãàÎã§.", chart)